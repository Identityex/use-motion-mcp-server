{{>licenseInfo}}
/* tslint:disable */
/* eslint-disable */
/**
 * {{appName}}
 * {{#appDescription}}
 * {{.}}
 * {{/appDescription}}
 * {{#version}}
 * Version: {{version}}
 * {{/version}}
 *
 * NOTE: This file is auto generated by OpenAPI Generator.
 * Do not edit this file manually.
 */

{{#imports}}
import { {{classname}} } from '../models';
{{/imports}}
import { MCPToolHandler } from '../../v1-controllers/types';
import { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import { Server } from '@modelcontextprotocol/sdk/server/index.js';

{{#operations}}
/**
 * {{classname}}Routes - MCP Routes Interface
 * {{description}}
 */
export interface {{classname}}Routes {
{{#operation}}
    /**
     * {{summary}}
     {{#notes}}
     * {{notes}}
     {{/notes}}
     */
    {{nickname}}: MCPToolHandler<{{#allParams}}{{#-first}}{ {{/-first}}{{paramName}}{{^required}}?{{/required}}: {{dataType}}{{#hasMore}}, {{/hasMore}}{{#-last}} }{{/-last}}{{/allParams}}{{^hasParams}}void{{/hasParams}}, {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>;
{{/operation}}
}

/**
 * MCP tool definitions for {{classname}}
 */
export const {{classname}}Tools = [
{{#operation}}
    {
        name: '{{#x-mcp-tool}}{{name}}{{/x-mcp-tool}}{{^x-mcp-tool}}{{operationId}}{{/x-mcp-tool}}',
        description: '{{summary}}',
        inputSchema: {
            type: 'object',
            {{#hasRequiredParams}}
            required: [{{#requiredParams}}'{{paramName}}'{{#hasMore}}, {{/hasMore}}{{/requiredParams}}],
            {{/hasRequiredParams}}
            properties: {
{{#allParams}}
                {{paramName}}: {
                    {{#isString}}
                    type: 'string',
                    {{/isString}}
                    {{#isNumber}}
                    type: 'number',
                    {{/isNumber}}
                    {{#isBoolean}}
                    type: 'boolean',
                    {{/isBoolean}}
                    {{#isArray}}
                    type: 'array',
                    items: {
                        {{#items}}
                        {{#isString}}
                        type: 'string',
                        {{/isString}}
                        {{#isNumber}}
                        type: 'number',
                        {{/isNumber}}
                        {{/items}}
                    },
                    {{/isArray}}
                    {{#description}}
                    description: '{{description}}',
                    {{/description}}
                    {{#isEnum}}
                    enum: [{{#allowableValues}}{{#values}}'{{{.}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}],
                    {{/isEnum}}
                    {{#minimum}}
                    minimum: {{minimum}},
                    {{/minimum}}
                    {{#maximum}}
                    maximum: {{maximum}},
                    {{/maximum}}
                    {{#defaultValue}}
                    default: {{{defaultValue}}},
                    {{/defaultValue}}
                }{{#hasMore}},{{/hasMore}}
{{/allParams}}
            }
        }
    }{{#hasMore}},{{/hasMore}}
{{/operation}}
];

/**
 * Mount {{classname}} routes on MCP server
 */
export function mount{{classname}}Routes(server: Server, routes: {{classname}}Routes): void {
    // Register tools
    server.setRequestHandler(ListToolsRequestSchema, async (request) => {
        const existingTools = request._meta?.tools || [];
        return {
            tools: [...existingTools, ...{{classname}}Tools]
        };
    });

    // Handle tool calls
    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        const { name, arguments: args } = request.params;

        switch (name) {
{{#operation}}
            case '{{#x-mcp-tool}}{{name}}{{/x-mcp-tool}}{{^x-mcp-tool}}{{operationId}}{{/x-mcp-tool}}':
                return routes.{{nickname}}(args || {});
{{/operation}}
            default:
                // Pass through to next handler
                return request._meta?.next?.(request) || {
                    content: [{
                        type: 'text',
                        text: `Unknown tool: ${name}`
                    }],
                    isError: true
                };
        }
    });
}
{{/operations}}